#!/usr/bin/env python
"""
Comprehensive authentication and permissions test script
"""
import os
from typing import Any, cast

import django  # type: ignore

# This is a developer-facing test script that imports Django models at
# runtime; disable a few Pylint checks that are noisy for such scripts.
# - import-outside-toplevel: we intentionally import after django.setup()
# - broad-except / unused-variable: developer/test conveniences
# - import-error / wrong-import-position: model imports are runtime-loaded
# - no-member: Django model classes get ORM members like `.objects`
# pylint: disable=import-outside-toplevel,broad-except,unused-variable
# pylint: disable=import-error,wrong-import-position,no-member
# pylint: disable=ungrouped-imports

# Setup Django environment
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "ecommerce_project.settings")
django.setup()

# Runtime import placed after django.setup(); if you want stricter
# static typing locally, install `django-stubs` into the venv.
from django.contrib.auth import get_user_model  # noqa: E402  # type: ignore[import]
User = get_user_model()  # noqa: E402  # type: ignore
from django.test import Client  # noqa: E402  # type: ignore
from django.urls import reverse  # noqa: E402  # type: ignore

# After Django is configured, try to import runtime models. If that
# fails (for example, running in a static-analysis pass), fall back to
# permissive runtime stubs imported from the top-level `shop_models`.
# Annotate `Profile`/`Store` as `Any` so type-checkers don't complain
# about Django ORM attributes like `.objects`.
try:  # pragma: no cover - runtime import
    from main.shop.models import Profile as _RuntimeProfile  # type: ignore[import]
    from main.shop.models import Store as _RuntimeStore  # type: ignore[import]

    # Use cast(Any, ...) so we don't create an annotated symbol earlier
    # which would trigger mypy's 'no-redef' checks when the static
    # TYPE_CHECKING imports are present.
    # Declare module-level names so static checkers see a consistent
    # type across all branches. We'll bind them below.
    Profile: Any
    Store: Any
    Profile = cast(Any, _RuntimeProfile)
    Store = cast(Any, _RuntimeStore)
except Exception:
    try:
        from main.shop.shop_models import (  # type: ignore[import,attr-defined]
            Profile as _StubProfile,
            Store as _StubStore,
        )

        Profile = cast(Any, _StubProfile)
        Store = cast(Any, _StubStore)
    except Exception:
        # Extremely defensive fallback for CI/static tooling where
        # even the permissive stub isn't importable.
        Profile = object  # type: ignore
        Store = object  # type: ignore
from shop_permissions import (  # noqa: E402
    user_has_role,
    user_is_admin,
    user_is_buyer,
    user_is_vendor,
    user_owns_object,
)


def test_authentication_permissions():
    """Test comprehensive authentication and permission system"""
    print("üîê TESTING AUTHENTICATION & PERMISSIONS SYSTEM")
    print("=" * 60)

    # Create test users with different roles
    print("\n1Ô∏è‚É£ Creating Test Users:")

    # Create buyer user
    buyer_user, created = User.objects.get_or_create(
        username="test_buyer",
        defaults={
            "email": "buyer@test.com",
            "first_name": "Test",
            "last_name": "Buyer",
        },
    )
    if created:
        buyer_user.set_password("testpass123")
        buyer_user.save()

    buyer_profile, created = (
        Profile.objects.get_or_create(  # type: ignore[attr-defined]
            user=buyer_user,
            defaults={"role": "buyer"},
        )
    )
    buyer_profile.role = "buyer"
    buyer_profile.save()

    print(f"‚úÖ Buyer user: {buyer_user.username} ({buyer_profile.role})")

    # Create vendor user
    vendor_user, created = User.objects.get_or_create(
        username="test_vendor",
        defaults={
            "email": "vendor@test.com",
            "first_name": "Test",
            "last_name": "Vendor",
        },
    )
    if created:
        vendor_user.set_password("testpass123")
        vendor_user.save()

    vendor_profile, created = (
        Profile.objects.get_or_create(  # type: ignore[attr-defined]
            user=vendor_user,
            defaults={"role": "vendor"},
        )
    )
    vendor_profile.role = "vendor"
    vendor_profile.save()

    print(f"‚úÖ Vendor user: {vendor_user.username} ({vendor_profile.role})")

    # Create admin user
    admin_user, created = User.objects.get_or_create(
        username="test_admin",
        defaults={
            "email": "admin@test.com",
            "first_name": "Test",
            "last_name": "Admin",
            "is_staff": True,
        },
    )
    if created:
        admin_user.set_password("testpass123")
        admin_user.save()

    admin_profile, created = (
        Profile.objects.get_or_create(  # type: ignore[attr-defined]
            user=admin_user,
            defaults={"role": "admin"},
        )
    )
    # admin_profile intentionally unused in this smoke test

    admin_staff = f"(staff: {admin_user.is_staff})"
    print("‚úÖ Admin user: " + admin_user.username + " " + admin_staff)

    # Test permission utility functions
    print("\n2Ô∏è‚É£ Testing Permission Utility Functions:")

    # Test role checking
    print("üîç Buyer role checks:")
    print(
        "   user_has_role(buyer, 'buyer'): " + str(user_has_role(buyer_user, "buyer"))
    )
    print(f"   user_is_buyer(buyer): {user_is_buyer(buyer_user)}")
    print(f"   user_is_vendor(buyer): {user_is_vendor(buyer_user)}")
    print(f"   user_is_admin(buyer): {user_is_admin(buyer_user)}")

    print("üîç Vendor role checks:")
    print(
        "   user_has_role(vendor, 'vendor'): "
        + str(user_has_role(vendor_user, "vendor"))
    )
    print(f"   user_is_vendor(vendor): {user_is_vendor(vendor_user)}")
    print(f"   user_is_buyer(vendor): {user_is_buyer(vendor_user)}")
    print(f"   user_is_admin(vendor): {user_is_admin(vendor_user)}")

    print("üîç Admin role checks:")
    print(f"   user_is_admin(admin): {user_is_admin(admin_user)}")
    print(f"   user_is_staff(admin): {admin_user.is_staff}")

    # Test URL access permissions
    print("\n3Ô∏è‚É£ Testing URL Access Permissions:")

    client = Client()

    # Test cases: (
    #   url_name,
    #   expected_status_for_anonymous,
    #   expected_status_for_buyer,
    #   expected_status_for_vendor,
    #   expected_status_for_admin,
    # )
    test_cases = [
        # Public URLs
        ("shop:home", 200, 200, 200, 200),
        ("shop:product_list", 200, 200, 200, 200),
        # Authentication URLs (should redirect authenticated users)
        (
            "shop:login",
            200,
            302,
            302,
            302,
        ),  # Should redirect authenticated users
        (
            "shop:register",
            200,
            302,
            302,
            302,
        ),  # Should redirect authenticated users
        # Buyer-only URLs
        (
            "shop:customer_dashboard",
            302,
            200,
            302,
            302,
        ),  # 302 = redirect to login/home
        ("shop:cart_detail", 302, 200, 302, 302),
        # Vendor-only URLs
        ("shop:vendor_dashboard", 302, 302, 200, 302),
        ("shop:store_list", 302, 302, 200, 302),
        # Admin-only URLs
        ("shop:category_list", 302, 302, 302, 200),
    ]

    users = [
        ("Anonymous", None, None),
        ("Buyer", buyer_user, "testpass123"),
        ("Vendor", vendor_user, "testpass123"),
        ("Admin", admin_user, "testpass123"),
    ]

    for url_name, *expected_statuses in test_cases:
        print(f"\nüåê Testing URL: {url_name}")

        for i, (user_type, user_obj, password) in enumerate(users):
            expected_status = expected_statuses[i]

            # Logout any previous user
            client.logout()

            # Login if user is provided
            if user_obj:
                login_success = client.login(
                    username=user_obj.username, password=password
                )
                if not login_success:
                    print(f"   ‚ùå {user_type}: Login failed")
                    continue

            try:
                url = reverse(url_name)
                response = client.get(url)
                actual_status = response.status_code

                if actual_status == expected_status:
                    msg = (
                        user_type
                        + ": "
                        + str(actual_status)
                        + " (expected "
                        + str(expected_status)
                        + ")"
                    )
                    print("   ‚úÖ " + msg)
                else:
                    msg = (
                        user_type
                        + ": "
                        + str(actual_status)
                        + " (expected "
                        + str(expected_status)
                        + ")"
                    )
                    print("   ‚ùå " + msg)
                    if hasattr(response, "url"):
                        print(f"      Redirected to: {response.url}")

            except Exception as e:
                print(f"   ‚ùå {user_type}: Error - {e}")

    # Test decorator functionality
    print("\n4Ô∏è‚É£ Testing Decorator Functionality:")

    from shop_permissions import (
        admin_required,
        buyer_required,
        vendor_required,
    )

    # Create mock request objects
    class MockRequest:
        """Minimal request-like object used with decorator mocks."""

        def __init__(self, user):
            self.user = user

    @vendor_required
    def mock_vendor_view(_request):
        return "Vendor view accessed"

    @buyer_required
    def mock_buyer_view(_request):
        return "Buyer view accessed"

    @admin_required
    def mock_admin_view(_request):
        return "Admin view accessed"

    # Test vendor decorator
    print("üîí Testing @vendor_required decorator:")
    try:
        mock_vendor_view(MockRequest(vendor_user))
        print("   ‚úÖ Vendor user: Access granted")
    except Exception as e:
        print(f"   ‚ùå Vendor user: {e}")

    # Test buyer decorator
    print("üîí Testing @buyer_required decorator:")
    try:
        mock_buyer_view(MockRequest(buyer_user))
        print("   ‚úÖ Buyer user: Access granted")
    except Exception as e:
        print(f"   ‚ùå Buyer user: {e}")

    # Test admin decorator
    print("üîí Testing @admin_required decorator:")
    try:
        mock_admin_view(MockRequest(admin_user))
        print("   ‚úÖ Admin user: Access granted")
    except Exception as e:
        print(f"   ‚ùå Admin user: {e}")

    # Test ownership checking
    print("\n5Ô∏è‚É£ Testing Object Ownership:")

    # Create a test store owned by vendor
    test_store, created = Store.objects.get_or_create(  # type: ignore[attr-defined]
        name="Test Store",
        vendor=vendor_user,
        defaults={
            "description": "Test store for ownership testing",
            "is_active": True,
        },
    )

    print("üì± Testing store ownership:")
    print(
        "   Vendor owns store: "
        + str(user_owns_object(vendor_user, test_store, "vendor"))
    )
    print(
        "   Buyer owns store: "
        + str(user_owns_object(buyer_user, test_store, "vendor"))
    )
    print(
        "   Admin owns store: "
        + str(user_owns_object(admin_user, test_store, "vendor"))
    )

    # Summary
    print("\n6Ô∏è‚É£ SECURITY FEATURES IMPLEMENTED:")
    security_features = [
        "‚úÖ Role-based access control (buyer, vendor, admin)",
        "‚úÖ Function-based view decorators (buyer/vendor/admin)",
        "‚úÖ Class-based view mixins for permissions",
        "‚úÖ Object ownership verification",
        "‚úÖ Anonymous-only views (login/register redirects)",
        "‚úÖ Template context processors for UI permissions",
        "‚úÖ Middleware for global permission enforcement",
        "‚úÖ API permission decorators with JSON responses",
        "‚úÖ Utility functions for permission checking",
        "‚úÖ Comprehensive error messages and redirects",
        "‚úÖ Security middleware for suspicious activity detection",
        "‚úÖ User activity tracking capabilities",
    ]

    for feature in security_features:
        print(f"   {feature}")

    print("\n7Ô∏è‚É£ TESTING RECOMMENDATIONS:")
    recommendations = [
        "üß™ Manual testing: Try accessing restricted URLs directly",
        "üß™ Test role switching: Change user roles and test access",
        "üß™ Test ownership: Try accessing other users' resources",
        "üß™ Test API endpoints with different user types",
        "üß™ Test form submissions with insufficient permissions",
        "üß™ Test URL manipulation and parameter injection",
        "üß™ Test session management and concurrent logins",
        "üß™ Test password reset security with expired tokens",
    ]

    for rec in recommendations:
        print(f"   {rec}")

    print("\n‚úÖ AUTHENTICATION & PERMISSIONS SYSTEM TEST COMPLETE!")
    print("üîê The system now has comprehensive role-based access control!")
    print("üåê Test different user roles at: http://127.0.0.1:8000/")


if __name__ == "__main__":
    test_authentication_permissions()
